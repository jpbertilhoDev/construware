import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  MessageCircle, 
  X, 
  Send, 
  Bot, 
  User, 
  Loader2,
  CheckCircle,
  ArrowRight,
  Sparkles,
  Mail,
  Phone
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import emailjs from '@emailjs/browser';

interface Message {
  id: string;
  type: 'ai' | 'user';
  content: string;
  timestamp: Date;
  options?: string[];
}

interface UserData {
  name?: string;
  company?: string;
  businessType?: string;
  employees?: string;
  currentSystem?: string;
  mainChallenge?: string;
  budget?: string;
  timeline?: string;
  email?: string;
  whatsapp?: string;
}

const businessTypes = [
  { id: 'construction', name: 'Constru√ß√£o Civil', emoji: 'üèóÔ∏è' },
  { id: 'consulting', name: 'Consultoria', emoji: 'üíº' },
  { id: 'ecommerce', name: 'E-commerce', emoji: 'üõí' },
  { id: 'restaurant', name: 'Restaurante', emoji: 'üçΩÔ∏è' },
  { id: 'services', name: 'Servi√ßos', emoji: '‚öôÔ∏è' },
  { id: 'other', name: 'Outro', emoji: 'üè¢' }
];

const employeeRanges = [
  { id: '1-5', name: '1-5 funcion√°rios' },
  { id: '6-20', name: '6-20 funcion√°rios' },
  { id: '21-50', name: '21-50 funcion√°rios' },
  { id: '51-100', name: '51-100 funcion√°rios' },
  { id: '100+', name: 'Mais de 100 funcion√°rios' }
];

const challenges = [
  { id: 'organization', name: 'Organiza√ß√£o e processos' },
  { id: 'communication', name: 'Comunica√ß√£o interna' },
  { id: 'productivity', name: 'Produtividade da equipa' },
  { id: 'costs', name: 'Controlo de custos' },
  { id: 'growth', name: 'Gest√£o do crescimento' },
  { id: 'automation', name: 'Automa√ß√£o de tarefas' }
];

export function AIConsultant() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [currentStep, setCurrentStep] = useState(0);
  const [isTyping, setIsTyping] = useState(false);
  const [userData, setUserData] = useState<UserData>({});
  const [inputValue, setInputValue] = useState('');
  const [deliveryMethod, setDeliveryMethod] = useState<'email' | 'whatsapp' | 'both'>('email');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Configura√ß√£o EmailJS (substituir pelos seus IDs reais)
  const EMAIL_SERVICE_ID = 'service_construware';
  const EMAIL_TEMPLATE_ID = 'template_relatorio';
  const EMAIL_PUBLIC_KEY = 'your_public_key_here';

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const addMessage = (content: string, type: 'ai' | 'user', options?: string[]) => {
    const newMessage: Message = {
      id: Date.now().toString(),
      type,
      content,
      timestamp: new Date(),
      options
    };
    setMessages(prev => [...prev, newMessage]);
  };

  const simulateTyping = (callback: () => void, delay: number = 1500) => {
    setIsTyping(true);
    setTimeout(() => {
      setIsTyping(false);
      callback();
    }, delay);
  };

  const handleUserResponse = (response: string, data?: Partial<UserData>) => {
    addMessage(response, 'user');
    
    if (data) {
      setUserData(prev => {
        const newData = { ...prev, ...data };
        console.log('üîÑ UserData updated:', newData);
        return newData;
      });
    }

    // Aguardar um tick para garantir que o estado foi atualizado antes de continuar
    setTimeout(() => {
      simulateTyping(() => {
        nextStep(response, data);
      });
    }, 50);
  };

  const nextStep = (userResponse?: string, data?: Partial<UserData>) => {
    const step = currentStep + 1;
    setCurrentStep(step);

    switch (step) {
      case 1:
        addMessage(
          "Ol√°! üëã Sou a assistente IA da Construware. Vou ajud√°-lo a descobrir como podemos otimizar o seu neg√≥cio.\n\nPara come√ßar, qual √© o seu nome?",
          'ai'
        );
        break;

      case 2:
        addMessage(
          `Prazer em conhec√™-lo, ${userData.name}! üôÇ\n\nQue tipo de neg√≥cio tem?`,
          'ai',
          businessTypes.map(bt => `${bt.emoji} ${bt.name}`)
        );
        break;

      case 3:
        const businessType = businessTypes.find(bt => userResponse?.includes(bt.name));
        addMessage(
          `Excelente! ${businessType?.emoji} Trabalhar no setor ${businessType?.name.toLowerCase()} √© desafiante.\n\nQuantos funcion√°rios tem a sua empresa?`,
          'ai',
          employeeRanges.map(er => er.name)
        );
        break;

      case 4:
        addMessage(
          `Perfeito! Com essa dimens√£o, h√° v√°rias oportunidades de otimiza√ß√£o.\n\nQual √© o principal desafio que enfrenta na gest√£o do neg√≥cio?`,
          'ai',
          challenges.map(ch => ch.name)
        );
        break;

      case 5:
        addMessage(
          `Compreendo perfeitamente. Esse √© um desafio comum que resolvemos frequentemente.\n\nAtualmente usa algum sistema de gest√£o? (pode escrever "n√£o" se n√£o usar)`,
          'ai'
        );
        break;

      case 6:
        addMessage(
          `Perfeito! Como prefere receber o seu relat√≥rio personalizado?`,
          'ai',
          [
            'üìß Email apenas',
            'üì± WhatsApp apenas', 
            'üìßüì± Email + WhatsApp'
          ]
        );
        break;

      case 7:
        if (deliveryMethod === 'email' || deliveryMethod === 'both') {
          addMessage(
            `Qual √© o seu email?`,
            'ai'
          );
        } else if (deliveryMethod === 'whatsapp') {
          addMessage(
            `Perfeito! Agora preciso do seu n√∫mero de WhatsApp.\n\nQual √© o seu n√∫mero? (Formato: +351 9XXXXXXXX)`,
            'ai'
          );
        }
        break;

      case 8:
        if (deliveryMethod === 'both' && !userData.whatsapp) {
          addMessage(
            `Agora o seu WhatsApp: (formato: +351 9XXXXXXXX)`,
            'ai'
          );
        } else {
          // Confirmar recebimento do WhatsApp se foi s√≥ WhatsApp
          if (deliveryMethod === 'whatsapp' && userData.whatsapp) {
            addMessage(
              `‚úÖ **WhatsApp confirmado:** ${userData.whatsapp}\n\nProcessando a sua an√°lise personalizada...`,
              'ai'
            );
          }
          generateReport();
        }
        break;

      case 9:
        generateReport();
        break;

      default:
        break;
    }
  };

  const generateReport = () => {
    const businessType = businessTypes.find(bt => 
      Object.values(userData).some(value => 
        typeof value === 'string' && value.includes(bt.name)
      )
    );

    const employeeRange = employeeRanges.find(er =>
      Object.values(userData).some(value =>
        typeof value === 'string' && value.includes(er.name)
      )
    );

    const challenge = challenges.find(ch =>
      Object.values(userData).some(value =>
        typeof value === 'string' && value.includes(ch.name)
      )
    );

    const savings = calculateSavings(employeeRange?.id || '1-5');
    
    simulateTyping(() => {
      // Gerar recomenda√ß√µes personalizadas baseadas no perfil
      const recommendations = generatePersonalizedRecommendations(businessType, employeeRange, challenge);
      
      // Aguardar um pouco para garantir que userData foi atualizado
      setTimeout(() => {
        let deliveryMessage = '';
        
        console.log('üìä Generating delivery message with userData:', userData);
        
        if (deliveryMethod === 'email') {
          deliveryMessage = `üìß **Enviando relat√≥rio detalhado para ${userData.email}...**`;
        } else if (deliveryMethod === 'whatsapp') {
          const phoneNumber = userData.whatsapp ? 
            userData.whatsapp.replace(/^\+?351\s*/, '') : 
            'n√∫mero n√£o encontrado';
          deliveryMessage = `üì± **Preparando relat√≥rio para o seu WhatsApp +351 ${phoneNumber}...**`;
        } else if (deliveryMethod === 'both') {
          deliveryMessage = `üìßüì± **Enviando relat√≥rio para email e WhatsApp...**`;
        }
        
        addMessage(
          `‚úÖ **An√°lise Completa!**\n\nüìä **Resumo do seu perfil:**\n‚Ä¢ Setor: ${businessType?.name}\n‚Ä¢ Funcion√°rios: ${employeeRange?.name}\n‚Ä¢ Principal desafio: ${challenge?.name}\n‚Ä¢ Sistema atual: ${userData.currentSystem || 'N√£o especificado'}\n\nüí∞ **Economia estimada:** ‚Ç¨${savings.toLocaleString()}/ano\n\nüéØ **Recomenda√ß√£o:** ${recommendations}\n\n${deliveryMessage}`,
          'ai'
        );
        
        setTimeout(() => {
          deliverReport();
        }, 2000);
      }, 300); // Pequeno delay para garantir que o estado foi atualizado
    }, 2000);
  };

  const calculateSavings = (employeeRange: string): number => {
    const baseSavings = {
      '1-5': 8000,
      '6-20': 25000,
      '21-50': 60000,
      '51-100': 120000,
      '100+': 250000
    };
    return baseSavings[employeeRange as keyof typeof baseSavings] || 8000;
  };

  const generatePersonalizedRecommendations = (businessType: any, employeeRange: any, challenge: any): string => {
    const systemRecommendations = {
      'construction': 'Sistema Web com gest√£o de obras, or√ßamentos e equipamentos',
      'consulting': 'Sistema Web com CRM, gest√£o de projetos e fatura√ß√£o',
      'ecommerce': 'Plataforma Web + App Mobile para vendas online',
      'restaurant': 'Sistema Desktop + App Mobile para gest√£o e delivery',
      'services': 'Sistema Web com agendamentos e gest√£o de clientes',
      'other': 'Sistema personalizado baseado nas suas necessidades espec√≠ficas'
    };

    const sizeRecommendations = {
      '1-5': 'Solu√ß√£o compacta e eficiente',
      '6-20': 'Sistema escal√°vel com m√≥dulos integrados',
      '21-50': 'Plataforma robusta com dashboards executivos',
      '51-100': 'Solu√ß√£o empresarial com m√∫ltiplos departamentos',
      '100+': 'Arquitetura enterprise com alta disponibilidade'
    };

    const baseRecommendation = systemRecommendations[businessType?.id || 'other'];
    const sizeRecommendation = sizeRecommendations[employeeRange?.id || '1-5'];
    
    return `${baseRecommendation} - ${sizeRecommendation}`;
  };

  const deliverReport = async () => {
    console.log('üöÄ DeliverReport - UserData:', userData);
    console.log('üöÄ DeliverReport - DeliveryMethod:', deliveryMethod);
    
    // Sempre notificar a equipa
    notifyTeam();
    
    // Entregar conforme escolha do cliente
    switch (deliveryMethod) {
      case 'email':
        await sendEmailReport();
        break;
      case 'whatsapp':
        console.log('üì± Enviando para WhatsApp:', userData.whatsapp);
        simulateTyping(() => {
          addMessage(
            `‚úÖ **Preparando envio para WhatsApp...**\n\nüì± Abrindo WhatsApp com o seu relat√≥rio personalizado`,
            'ai'
          );
          
          setTimeout(() => {
            sendWhatsAppToClient();
          }, 2000);
        }, 1000);
        break;
      case 'both':
        await sendEmailReport();
        // O WhatsApp ser√° enviado ap√≥s o email (j√° implementado em sendEmailReport)
        break;
    }
  };

  const sendEmailReport = async () => {
    if (!userData.email) return;
    
    const emailContent = generateDetailedEmailReport();
    
    // Por agora, usar m√©todo de fallback que sempre funciona
    // TODO: Configurar EmailJS quando tiver as credenciais
    const fallbackEmailMethod = () => {
      // Criar link mailto com relat√≥rio pr√©-preenchido
      const subject = encodeURIComponent(`Relat√≥rio IA Personalizado - ${userData.name}`);
      const body = encodeURIComponent(emailContent);
      const mailtoLink = `mailto:${userData.email}?subject=${subject}&body=${body}`;
      
      // Abrir cliente de email padr√£o
      window.open(mailtoLink);
      
      simulateTyping(() => {
        addMessage(
          `‚úÖ **Cliente de email aberto!**\n\nüìß Relat√≥rio pr√©-preenchido para: ${userData.email}\nüëÜ Basta clicar em "Enviar" no seu email\n\n${userData.whatsapp ? `üì± Enviando tamb√©m para o WhatsApp...` : ''}`,
          'ai'
        );
        
        if (userData.whatsapp) {
          setTimeout(() => {
            sendWhatsAppToClient();
          }, 2000);
        } else {
          setTimeout(() => {
            finalMessage();
          }, 2000);
        }
      }, 1000);
    };

    // Tentar EmailJS primeiro, usar fallback se falhar
    try {
      if (EMAIL_PUBLIC_KEY === 'your_public_key_here') {
        // Usar m√©todo fallback se n√£o estiver configurado
        fallbackEmailMethod();
        return;
      }

      // Envio real usando EmailJS (quando configurado)
      const templateParams = {
        to_email: userData.email,
        to_name: userData.name,
        subject: `Relat√≥rio IA Personalizado - ${userData.name}`,
        message: emailContent,
        from_name: 'Construware IA',
        reply_to: 'contato@construware.pt'
      };

      emailjs.init(EMAIL_PUBLIC_KEY);
      await emailjs.send(EMAIL_SERVICE_ID, EMAIL_TEMPLATE_ID, templateParams);
      
      simulateTyping(() => {
        addMessage(
          `‚úÖ **Email enviado automaticamente!**\n\nüìß Relat√≥rio enviado para: ${userData.email}\n\n${userData.whatsapp ? `üì± Enviando tamb√©m para o WhatsApp...` : ''}`,
          'ai'
        );
        
        if (userData.whatsapp) {
          setTimeout(() => {
            sendWhatsAppToClient();
          }, 2000);
        } else {
          setTimeout(() => {
            finalMessage();
          }, 2000);
        }
      }, 1000);
      
    } catch (error) {
      console.error('Erro ao enviar email:', error);
      fallbackEmailMethod();
    }
  };

  const generateDetailedEmailReport = (): string => {
    const businessType = businessTypes.find(bt => 
      Object.values(userData).some(value => 
        typeof value === 'string' && value.includes(bt.name)
      )
    );

    const employeeRange = employeeRanges.find(er =>
      Object.values(userData).some(value =>
        typeof value === 'string' && value.includes(er.name)
      )
    );

    const challenge = challenges.find(ch =>
      Object.values(userData).some(value =>
        typeof value === 'string' && value.includes(ch.name)
      )
    );

    const savings = calculateSavings(employeeRange?.id || '1-5');
    const recommendation = generatePersonalizedRecommendations(businessType, employeeRange, challenge);

    return `
ü§ñ RELAT√ìRIO DE AN√ÅLISE IA - CONSTRUWARE
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

DADOS DO CLIENTE:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Nome: ${userData.name}
Email: ${userData.email}
${userData.whatsapp ? `WhatsApp: ${userData.whatsapp}` : ''}
Data da An√°lise: ${new Date().toLocaleDateString('pt-PT')}

PERFIL EMPRESARIAL:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ú¶ Setor: ${businessType?.name}
‚ú¶ Dimens√£o: ${employeeRange?.name}
‚ú¶ Principal Desafio: ${challenge?.name}
‚ú¶ Sistema Atual: ${userData.currentSystem}

AN√ÅLISE IA PERSONALIZADA:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Com base no perfil da sua empresa, identific√°mos oportunidades significativas de otimiza√ß√£o.

üéØ RECOMENDA√á√ÉO PRINCIPAL:
${recommendation}

üí∞ ECONOMIA ESTIMADA:
‚Ç¨${savings.toLocaleString()}/ano

Esta estimativa baseia-se em:
‚Ä¢ Redu√ß√£o de tempo em processos manuais
‚Ä¢ Automa√ß√£o de tarefas repetitivas  
‚Ä¢ Melhoria na gest√£o de dados
‚Ä¢ Otimiza√ß√£o de recursos humanos

PR√ìXIMOS PASSOS:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
1. üìÖ Demonstra√ß√£o personalizada (30 min)
   ‚Üí Mostramos o sistema adaptado ao seu caso

2. üîç An√°lise t√©cnica detalhada
   ‚Üí Avalia√ß√£o completa das suas necessidades

3. üíº Proposta comercial personalizada
   ‚Üí Or√ßamento ajustado ao seu or√ßamento

4. üöÄ Implementa√ß√£o e forma√ß√£o
   ‚Üí Suporte completo durante todo o processo

CONTACTOS:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìû WhatsApp: +351 963 901 577
üìß Email: contato@construware.pt
üåê Website: www.construware.pt

‚ö° RESPOSTA GARANTIDA EM 24H ‚ö°

Obrigado por confiar na nossa IA!
Equipa Construware
    `;
  };

  const notifyTeamWhatsAppRequest = async (phone: string, clientName: string) => {
    const businessType = businessTypes.find(bt => 
      Object.values(userData).some(value => 
        typeof value === 'string' && value.includes(bt.name)
      )
    );

    const employeeRange = employeeRanges.find(er =>
      Object.values(userData).some(value =>
        typeof value === 'string' && value.includes(er.name)
      )
    );

    const teamNotification = `ü§ñ *LEAD WHATSAPP - IA CONSULTORA*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üì± *CLIENTE PREFERIU WHATSAPP:*
üë§ Nome: *${clientName}*
üìû WhatsApp: *+${phone}*
üè¢ Setor: *${businessType?.name || 'N√£o informado'}*
üë• Funcion√°rios: *${userData.employees || 'N√£o informado'}*
‚ö†Ô∏è Desafio: *${userData.mainChallenge || 'N√£o informado'}*
üíª Sistema Atual: *${userData.currentSystem || 'N√£o informado'}*

üí∞ *ECONOMIA ESTIMADA:* ‚Ç¨${calculateSavings(employeeRange?.id || '1-5').toLocaleString()}/ano

üéØ *PRIORIDADE:* ${calculatePriority()}
üìÖ *Data/Hora:* ${new Date().toLocaleString('pt-PT')}

‚úÖ *A√á√ïES IMEDIATAS:*
1. Cliente recebeu relat√≥rio completo via WhatsApp
2. Contactar em 24h para demonstra√ß√£o
3. Preparar proposta personalizada
4. Agendar reuni√£o comercial

üö® *LEAD QUALIFICADO - SEGUIMENTO PRIORIT√ÅRIO!*`;

    try {
      const encodedNotification = encodeURIComponent(teamNotification);
      // Enviar notifica√ß√£o para equipa via WhatsApp
      const teamWhatsApp = `https://wa.me/351963901577?text=${encodedNotification}`;
      
      // Abrir numa janela pequena que se fecha automaticamente
      const popup = window.open(teamWhatsApp, 'team_notification', 'width=400,height=300');
      setTimeout(() => {
        if (popup) popup.close();
      }, 2000);
      
    } catch (error) {
      console.log('Notifica√ß√£o da equipa falhou');
    }
  };

  const sendWhatsAppToClient = async () => {
    console.log('üì± SendWhatsAppToClient called with userData:', userData);
    
    if (!userData.whatsapp) {
      console.error('‚ùå WhatsApp number not found in userData');
      addMessage(
        `‚ùå **Erro**: N√∫mero de WhatsApp n√£o encontrado.\n\nPor favor, reinicie o processo ou contacte-nos diretamente:\nüìû +351 963 901 577`,
        'ai'
      );
      return;
    }
    
    console.log('üì± WhatsApp number found:', userData.whatsapp);

    // Tentar Evolution API primeiro, fallback wa.me se falhar
    try {
      console.log('üöÄ Tentando envio via Evolution API...');
      
      // Preparar dados para Evolution API
      const businessType = businessTypes.find(bt => 
        Object.values(userData).some(value => 
          typeof value === 'string' && value.includes(bt.name)
        )
      );

      const employeeRange = employeeRanges.find(er =>
        Object.values(userData).some(value =>
          typeof value === 'string' && value.includes(er.name)
        )
      );

      const savings = calculateSavings(employeeRange?.id || '1-5');
      const recommendations = generatePersonalizedRecommendations(businessType, employeeRange, null);

      const payload = {
        nome: userData.name,
        telefone: userData.whatsapp,
        setor: businessType?.name,
        funcionarios: userData.employees,
        desafio: userData.mainChallenge,
        sistemaAtual: userData.currentSystem,
        economia: savings,
        recomendacao: recommendations,
        email: userData.email
      };

      console.log('üì§ Payload para Evolution API:', payload);

      // Chamar API Baileys (anti-ban) com fallback Evolution
      const response = await fetch('/api/whatsapp/send-baileys', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          number: userData.whatsapp,
          message: generateProfessionalWhatsAppMessage(userData, businessType, savings, recommendations),
          sendPDF: true, // Ativar envio autom√°tico de PDFs
          userData: {
            ...userData,
            businessType: businessType?.name,
            estimatedSavings: savings,
            recommendations: recommendations
          }
        })
      });

      const result = await response.json();

      if (result.success) {
        console.log(`‚úÖ Sucesso via ${result.method}:`, result);
        
        if (result.method === 'baileys') {
          // Enviado automaticamente via Baileys (anti-ban)
          addMessage(
            `üéâ **Mensagem enviada com sucesso!**\n\nüì± **WhatsApp:** ${userData.whatsapp}\nüõ°Ô∏è **M√©todo:** Baileys Anti-Ban (Directo)\nüì± **Status:** Entregue automaticamente\n\n‚úÖ **O QUE FOI ENVIADO:**\n‚Ä¢ Mensagem de agradecimento personalizada\n‚Ä¢ Portfolio Construware (PDF)\n‚Ä¢ An√°lise personalizada (PDF)\n\nüì± **Verifique seu WhatsApp agora!** üöÄ\nTodos os materiais foram enviados automaticamente.\n\n‚ö° **PR√ìXIMOS PASSOS:**\nNossa equipa comercial entrar√° em contacto nas pr√≥ximas 24h para demonstra√ß√£o gratuita!`,
            'ai'
          );
        } else if (result.method === 'evolution_fallback') {
          // Fallback Evolution API
          addMessage(
            `‚úÖ **Mensagem enviada (Fallback)!**\n\nüì± **N√∫mero:** ${userData.whatsapp}\nüîÑ **M√©todo:** Evolution API (Fallback)\nüì® **Message ID:** ${result.messageId || 'N/A'}\n\nüì± **Verifique seu WhatsApp** - a mensagem foi enviada!\n\n‚ö° **Nossa equipa comercial foi notificada e entrar√° em contacto em 24h!**`,
            'ai'
          );
        } else if (result.method === 'wa_me_fallback' && result.waLink) {
          // √öltimo fallback wa.me
          window.open(result.waLink, '_blank');
          
          addMessage(
            `‚úÖ **WhatsApp aberto!**\n\nüì± **N√∫mero:** ${userData.whatsapp}\nüîó **M√©todo:** wa.me (Manual)\nüìÑ **Mensagem:** Pr√©-preenchida com an√°lise completa\n\nüéØ **COMO PROCEDER:**\n\n1Ô∏è‚É£ O WhatsApp abriu numa nova janela\n2Ô∏è‚É£ Clique **"Enviar"** para receber todo o material\n3Ô∏è‚É£ Aguarde pelos PDFs nos pr√≥ximos minutos\n\nüíº **RECEBER√Å:**\n‚Ä¢ Portfolio da empresa (PDF)\n‚Ä¢ An√°lise personalizada (PDF)\n‚Ä¢ Contacto da equipa comercial em 24h`,
            'ai'
          );
        }
        
        // Notificar equipa sempre
        await notifyTeamWhatsAppRequest(userData.whatsapp, userData.name || 'Cliente');
        
        setTimeout(() => {
          finalMessage();
        }, 3000);
        
        return;
      } else {
        throw new Error(result.error || 'Falha na Evolution API');
      }

    } catch (evolutionError: any) {
      console.error('‚ùå Evolution API falhou:', evolutionError.message);
      console.log('üîÑ Usando m√©todo wa.me como fallback...');
      
      // Fallback completo para m√©todo wa.me original
      await sendWhatsAppFallback();
    }
  };

  // M√©todo wa.me original como fallback
  const sendWhatsAppFallback = async () => {
    console.log('üì± Executando fallback wa.me para:', userData.whatsapp);

    // Validar e formatar n√∫mero portugu√™s (formato WhatsApp Business API compliant)
    const cleanPhone = userData.whatsapp.replace(/\D/g, '');
    let formattedPhone = '';
    
    if (cleanPhone.startsWith('351') && cleanPhone.length === 12) {
      formattedPhone = cleanPhone; // J√° tem c√≥digo do pa√≠s completo
    } else if (cleanPhone.startsWith('9') && cleanPhone.length === 9) {
      formattedPhone = '351' + cleanPhone; // Adicionar c√≥digo do pa√≠s portugu√™s
    } else if (cleanPhone.startsWith('2') && cleanPhone.length === 9) {
      formattedPhone = '351' + cleanPhone; // Fixo portugu√™s tamb√©m v√°lido
    } else {
      addMessage(
        `‚ùå **N√∫mero inv√°lido**: ${userData.whatsapp}\n\n‚úÖ **Formatos aceites para Portugal:**\n‚Ä¢ +351 9XXXXXXXX (telem√≥vel)\n‚Ä¢ +351 2XXXXXXXX (fixo)\n‚Ä¢ 9XXXXXXXX\n‚Ä¢ 2XXXXXXXX\n\nüìû **Exemplo:** +351 963 901 577\n\nPor favor, reinicie o processo com o n√∫mero correto.`,
        'ai'
      );
      return;
    }
    
    console.log('üì± Formatted phone number:', formattedPhone);
    
    // Buscar dados espec√≠ficos para personaliza√ß√£o
    const businessTypeInfo = businessTypes.find(bt => 
      Object.values(userData).some(value => 
        typeof value === 'string' && value.includes(bt.name)
      )
    );

    const employeeRange = employeeRanges.find(er =>
      Object.values(userData).some(value =>
        typeof value === 'string' && value.includes(er.name)
      )
    );

    const challenge = challenges.find(ch =>
      Object.values(userData).some(value =>
        typeof value === 'string' && value.includes(ch.name)
      )
    );

    const savings = calculateSavings(employeeRange?.id || '1-5');
    const recommendations = generatePersonalizedRecommendations(businessTypeInfo, employeeRange, challenge);

    // Gerar mensagem profissional empresarial
    const professionalMessage = generateProfessionalWhatsAppMessage(userData, businessTypeInfo, savings, recommendations);

    // Envio inteligente: m√©todo manual confi√°vel + notifica√ß√£o da equipa
    const encodedMessage = encodeURIComponent(professionalMessage);
    const whatsappUrl = `https://wa.me/${formattedPhone}?text=${encodedMessage}`;
    
    // Sempre notificar a equipa sobre o interesse em WhatsApp
    await notifyTeamWhatsAppRequest(formattedPhone, userData.name || 'Cliente');
    
    // Abrir WhatsApp do cliente
    window.open(whatsappUrl, '_blank');
    
    simulateTyping(() => {
      addMessage(
        `‚úÖ **Relat√≥rio empresarial enviado!**\n\nüì± **WhatsApp aberto para:** +${formattedPhone}\nüìÑ **Mensagem profissional** pr√©-preenchida\n\nüéØ **COMO PROCEDER:**\n\n1Ô∏è‚É£ Clique **"Enviar"** no WhatsApp que acabou de abrir\n2Ô∏è‚É£ Receber√° **PDF da marca** nos pr√≥ximos minutos\n3Ô∏è‚É£ Nossa equipa comercial entrar√° em contacto em **24h**\n\nüíº **O QUE RECEBER√Å:**\n‚Ä¢ Relat√≥rio personalizado com an√°lise IA\n‚Ä¢ Portfolio completo da Construware\n‚Ä¢ Proposta comercial inicial\n‚Ä¢ Demonstra√ß√£o gratuita agendada\n\n‚ö° **GARANTIA:** Resposta profissional garantida em 24 horas!`,
        'ai'
      );
      
      setTimeout(() => {
        finalMessage();
      }, 3000);
    }, 1000);
  };

  // Fun√ß√£o para gerar mensagem PARA O CLIENTE (automa√ß√£o)
  const generateProfessionalWhatsAppMessage = (userData: any, businessType: any, savings: number, recommendations: string): string => {
    const currentDate = new Date().toLocaleDateString('pt-PT');
    const currentTime = new Date().toLocaleTimeString('pt-PT', { hour: '2-digit', minute: '2-digit' });
    
    return `üëã Ol√° *${userData.name}*!

Obrigado por usar a nossa *IA Consultora da Construware*! ü§ñ‚ú®

‚úÖ *AN√ÅLISE CONCLU√çDA*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Recebemos todas as informa√ß√µes sobre a sua empresa e j√° process√°mos a an√°lise personalizada:

üè¢ *Empresa:* ${userData.company || userData.name}
üìä *Setor:* ${businessType?.name || 'Personalizado'}
üë• *Funcion√°rios:* ${userData.employees}
‚ö†Ô∏è *Principal Desafio:* ${userData.mainChallenge}

üéØ *BOA NOT√çCIA PARA SI:*
Com base na sua an√°lise, identific√°mos um potencial de economia de *‚Ç¨${savings.toLocaleString()}/ano* atrav√©s da otimiza√ß√£o dos seus processos!

üìã *O QUE VAI RECEBER:*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Em alguns minutos, receber√° no WhatsApp:

üìÑ *Portfolio Construware* (PDF)
‚Üí Casos de sucesso de empresas como a sua
‚Üí Servi√ßos dispon√≠veis e investimentos
‚Üí Testemunhos de clientes satisfeitos

üìä *An√°lise Personalizada* (PDF)
‚Üí Recomenda√ß√µes espec√≠ficas para a sua empresa
‚Üí Cronograma de implementa√ß√£o
‚Üí C√°lculo detalhado do ROI

üöÄ *PR√ìXIMOS PASSOS:*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Nossa equipa comercial ir√° contact√°-lo nas *pr√≥ximas 24 horas* para:

‚úÖ Agendar uma *demonstra√ß√£o gratuita* (30 min)
‚úÖ Mostrar-lhe o sistema funcionando
‚úÖ Responder √†s suas quest√µes t√©cnicas
‚úÖ Preparar uma proposta personalizada

üìû *CONTACTOS DIRETOS:*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

*WhatsApp:* +351 963 901 577
*Email:* comercial@construware.pt
*Website:* www.construware.pt

*Hor√°rio:* Segunda a Sexta, 09h-18h

üí° *Tem alguma quest√£o urgente?*
Pode contactar-nos diretamente pelos dados acima!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üèÜ *CONSTRUWARE* - Transformamos empresas atrav√©s da tecnologia

*Obrigado por confiar em n√≥s, ${userData.name}!* üôè‚ú®

*Mensagem enviada automaticamente em ${currentDate} √†s ${currentTime}*`;
  };

  const notifyTeam = () => {
    const businessType = businessTypes.find(bt => 
      Object.values(userData).some(value => 
        typeof value === 'string' && value.includes(bt.name)
      )
    );

    const teamReport = `ü§ñ *NOVO LEAD QUALIFICADO - IA CONSULTORA*

üë§ *Cliente:* ${userData.name}
üìß *Email:* ${userData.email}
üì± *WhatsApp:* ${userData.whatsapp || 'N√£o informado'}
üìä *Setor:* ${businessType?.name}
üë• *Funcion√°rios:* ${userData.employees}
‚ö†Ô∏è *Principal Desafio:* ${userData.mainChallenge}
üíª *Sistema Atual:* ${userData.currentSystem}

üí∞ *ECONOMIA ESTIMADA:* ‚Ç¨${calculateSavings(userData.employees?.split(' ')[0] || '1-5').toLocaleString()}/ano

üéØ *PRIORIDADE:* ${calculatePriority()} 
üïí *Qualificado em:* ${new Date().toLocaleString('pt-PT')}

‚úÖ *PR√ìXIMAS A√á√ïES:*
1. Enviar email de follow-up personalizado
2. Agendar demonstra√ß√£o
3. Preparar proposta comercial

üéØ Cliente pr√©-qualificado pela IA - Contactar em 24h!`;

    const encodedMessage = encodeURIComponent(teamReport);
    window.open(`https://wa.me/351963901577?text=${encodedMessage}`, '_blank');
  };

  const calculatePriority = (): string => {
    const employeeCount = userData.employees?.split(' ')[0] || '1';
    const numEmployees = parseInt(employeeCount);
    
    if (numEmployees >= 51) return 'ALTA üî•';
    if (numEmployees >= 21) return 'M√âDIA-ALTA üìà';
    if (numEmployees >= 6) return 'M√âDIA üìä';
    return 'STANDARD üìã';
  };

  const finalMessage = () => {
    const deliveredTo = [];
    
    if (deliveryMethod === 'email' || deliveryMethod === 'both') {
      deliveredTo.push(`üìß Email: ${userData.email}`);
    }
    
    if (deliveryMethod === 'whatsapp' || deliveryMethod === 'both') {
      deliveredTo.push(`üì± WhatsApp: ${userData.whatsapp}`);
    }

    addMessage(
      `üéâ **Processo conclu√≠do com sucesso!**\n\n‚úÖ **Relat√≥rio enviado para:**\n${deliveredTo.join('\n')}\n\n‚ö° **Nossa equipa entrar√° em contacto em at√© 24h** com:\n‚Ä¢ Demonstra√ß√£o personalizada gratuita\n‚Ä¢ An√°lise t√©cnica detalhada  \n‚Ä¢ Proposta comercial sob medida\n\nüí¨ **Contactos diretos:**\nüìû WhatsApp: +351 963 901 577\nüìß Email: contato@construware.pt\n\n**Obrigada por confiar na nossa IA!** üöÄ‚ú®`,
      'ai'
    );
  };

  const handleTextInput = (e: React.FormEvent) => {
    e.preventDefault();
    
    const response = inputValue.trim();
    setInputValue('');

    switch (currentStep) {
      case 1:
        handleUserResponse(response, { name: response });
        break;
      case 5:
        handleUserResponse(response, { currentSystem: response });
        break;
      case 7:
        console.log('üìû Step 7 - DeliveryMethod:', deliveryMethod, 'Response:', response);
        if (deliveryMethod === 'email' || deliveryMethod === 'both') {
          handleUserResponse(response, { email: response });
        } else if (deliveryMethod === 'whatsapp') {
          console.log('üì± Saving WhatsApp number:', response);
          handleUserResponse(response, { whatsapp: response });
        }
        break;
      case 8:
        if (deliveryMethod === 'both' && !userData.whatsapp) {
          handleUserResponse(response, { whatsapp: response });
        }
        break;
    }
  };

  const initializeChat = () => {
    setIsOpen(true);
    if (messages.length === 0) {
      simulateTyping(() => {
        nextStep();
      }, 500);
    }
  };

  return (
    <>
      {/* Floating Chat Button */}
      <motion.div
        className="fixed bottom-6 right-6 z-50"
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        transition={{ duration: 0.5, delay: 2 }}
      >
        <Button
          onClick={initializeChat}
          data-ai-button
          className="h-14 w-14 rounded-full bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 shadow-lg shadow-purple-500/25 hover:shadow-purple-500/40 transition-all duration-300"
        >
          <Bot className="w-6 h-6" />
        </Button>
        
        {/* Notification Badge */}
        <motion.div
          className="absolute -top-2 -right-2 w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center"
          animate={{ scale: [1, 1.2, 1] }}
          transition={{ duration: 2, repeat: Infinity }}
        >
          <Sparkles className="w-3 h-3 text-white" />
        </motion.div>
      </motion.div>

      {/* Chat Modal */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="fixed inset-0 z-50 bg-black/50 backdrop-blur-sm flex items-end md:items-center justify-center p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <motion.div
              className="w-full max-w-md mx-auto"
              initial={{ y: "100%", opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              exit={{ y: "100%", opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 500 }}
            >
              <Card className="bg-gray-900 border border-white/10 rounded-t-3xl md:rounded-3xl shadow-2xl overflow-hidden">
                {/* Header */}
                <div className="bg-gradient-to-r from-purple-500 to-purple-600 p-4 flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
                      <Bot className="w-5 h-5 text-white" />
                    </div>
                    <div>
                      <h3 className="text-white font-bold">IA Consultora</h3>
                      <p className="text-white/80 text-sm">Construware Assistant</p>
                    </div>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setIsOpen(false)}
                    className="text-white/80 hover:text-white hover:bg-white/20"
                  >
                    <X className="w-5 h-5" />
                  </Button>
                </div>

                {/* Messages */}
                <CardContent className="p-0 h-[60vh] max-h-[500px] overflow-y-auto bg-gray-950">
                  <div className="p-4 space-y-4">
                    {messages.map((message) => (
                      <motion.div
                        key={message.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                      >
                        {message.type === 'ai' && (
                          <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center flex-shrink-0">
                            <Bot className="w-4 h-4 text-white" />
                          </div>
                        )}
                        
                        <div className={`max-w-[80%] ${message.type === 'user' ? 'order-2' : ''}`}>
                          <div className={`p-3 rounded-2xl ${
                            message.type === 'ai' 
                              ? 'bg-white/5 border border-white/10 text-white' 
                              : 'bg-purple-500 text-white'
                          }`}>
                            <p className="whitespace-pre-line text-sm">{message.content}</p>
                          </div>
                          
                          {/* Options */}
                          {message.options && (
                            <div className="mt-3 space-y-2">
                              {message.options.map((option, index) => (
                                <Button
                                  key={index}
                                  variant="outline"
                                  size="sm"
                                  className="w-full justify-start bg-white/[0.02] border-white/10 text-white/80 hover:bg-purple-500/20 hover:border-purple-500/30 hover:text-white text-sm h-auto py-2"
                                                                  onClick={() => {
                                  if (currentStep === 2) {
                                    const businessType = businessTypes.find(bt => option.includes(bt.name));
                                    handleUserResponse(option, { businessType: businessType?.name });
                                  } else if (currentStep === 3) {
                                    handleUserResponse(option, { employees: option });
                                  } else if (currentStep === 4) {
                                    handleUserResponse(option, { mainChallenge: option });
                                  } else if (currentStep === 6) {
                                    // Definir m√©todo de entrega
                                    let method = '';
                                    if (option.includes('Email apenas')) {
                                      method = 'email';
                                      setDeliveryMethod('email');
                                      console.log('üìß DeliveryMethod set to EMAIL');
                                    } else if (option.includes('WhatsApp apenas')) {
                                      method = 'whatsapp';
                                      setDeliveryMethod('whatsapp');
                                      console.log('üì± DeliveryMethod set to WHATSAPP');
                                    } else if (option.includes('Email + WhatsApp')) {
                                      method = 'both';
                                      setDeliveryMethod('both');
                                      console.log('üìßüì± DeliveryMethod set to BOTH');
                                    }

                                    handleUserResponse(option);
                                  }
                                }}
                                >
                                  {option}
                                </Button>
                              ))}
                            </div>
                          )}
                        </div>

                        {message.type === 'user' && (
                          <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center flex-shrink-0">
                            <User className="w-4 h-4 text-white" />
                          </div>
                        )}
                      </motion.div>
                    ))}

                    {/* Typing Indicator */}
                    {isTyping && (
                      <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="flex gap-3"
                      >
                        <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center">
                          <Bot className="w-4 h-4 text-white" />
                        </div>
                        <div className="bg-white/5 border border-white/10 p-3 rounded-2xl">
                          <div className="flex gap-1">
                            <div className="w-2 h-2 bg-white/60 rounded-full animate-bounce"></div>
                            <div className="w-2 h-2 bg-white/60 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                            <div className="w-2 h-2 bg-white/60 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                          </div>
                        </div>
                      </motion.div>
                    )}

                    <div ref={messagesEndRef} />
                  </div>
                </CardContent>

                {/* Input */}
                {(currentStep === 1 || currentStep === 5 || currentStep === 7 || currentStep === 8) && !isTyping && (
                  <div className="p-4 bg-gray-900 border-t border-white/10">
                    <form onSubmit={handleTextInput} className="flex gap-2">
                      <input
                        type={
                          (currentStep === 7 && (deliveryMethod === 'email' || deliveryMethod === 'both')) ? 'email' :
                          (currentStep === 7 && deliveryMethod === 'whatsapp') || currentStep === 8 ? 'tel' :
                          'text'
                        }
                        value={inputValue}
                        onChange={(e) => setInputValue(e.target.value)}
                        placeholder={
                          currentStep === 1 ? 'Digite seu nome...' :
                          currentStep === 5 ? 'Sistema atual ou "n√£o"...' :
                          currentStep === 7 && (deliveryMethod === 'email' || deliveryMethod === 'both') ? 'Digite seu email...' :
                          currentStep === 7 && deliveryMethod === 'whatsapp' ? '+351 9XXXXXXXX' :
                          currentStep === 8 ? '+351 9XXXXXXXX' :
                          'Digite aqui...'
                        }
                        className="flex-1 bg-white/5 border border-white/10 rounded-xl px-4 py-2 text-white placeholder:text-white/40 focus:outline-none focus:border-purple-500/50"
                        disabled={isTyping}
                      />
                      <Button
                        type="submit"
                        size="sm"
                        className="bg-purple-500 hover:bg-purple-600 text-white px-3"
                        disabled={isTyping || !inputValue.trim()}
                      >
                        <Send className="w-4 h-4" />
                      </Button>
                    </form>
                  </div>
                )}
              </Card>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
} 